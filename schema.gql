# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthReturnDto {
  _id: String!
  walletAddress: String!
  email: String
  status: String!
}

type BaseUserWarriorItemDto {
  userWarriorId: String
  name: String
  head: String
  sholder: String
  leftHand: String
  rightHand: String
  body: String
  leg: String
  leftWeapon: String
  rightWeapon: String
  type: String
  element: String
  rarity: String
  rareOrder: Float
  role: String
  releaseDate: DateTime
}

type BeginnerLoginRewardDto {
  name: String
  code: String
  type: String
  scheduleCode: String
  description: String
  status: String
  rewardId: String
  value: Float
  hasClaimed: String
  userRewardId: String
}

type BetaAccount {
  _id: String!
  name: String!
  telegram: String!
  walletAddress: String!
}

type Bundle {
  _id: String!
  name: String!
  priority: Float!
}

type BundleDto {
  name: String!
  priority: Float!
}

type BundleVersionDto {
  bundleVersion: String!
  bundlesPriority: [BundleDto!]
  bundleUrl: String!
}

type BuyItemDto {
  nftToken: Float!
  sellOrder: String!
  buyerFee: Float!
  signature: String!
  buyerFeeSignature: String!
  buyQuantities: Float!
}

type Campaign {
  _id: String!
  stage: Float!
  rewardId: String!
  description: String!
  type: String!
}

type CampaignInfoDto {
  stage: Float!
  rewards: [RewardResourceItemDto!]
  description: String!
  canStart: Boolean!
}

type ClaimRewardDto {
  rewards: [RewardResourceItemDto!]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Event {
  _id: String!
  name: String!
  code: String!
  type: String!
  description: String!
  status: String!
}

type GameConfig {
  _id: String!
  key: String!
  value: String!
  description: String!
}

type Goal {
  _id: String!
  name: String!
  type: String!
  start: Float!
  end: Float!
  rewardId: String!
}

type InfoReturnDto {
  name: String!
  avatarCode: String!
  campaignStage: Float
  level: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LeaderboardDto {
  rank: Float!
  name: String!
  campaignStage: Float
  timeFinishStage: Float
  rewards: [RewardResourceItemDto!]
}

type LoginRecord {
  _id: String!
  country: String!
  city: String!
  region: String!
  lat: Float!
  long: Float!
  ip: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type LoginReturnDto {
  _id: String!
  email: String
  name: String!
  avatarCode: String!
  campaignStage: Float
  timeFinishStage: Float!
  status: String!
  health: Float!
  mana: Float!
  energy: Float!
  expiresIn: String!
  accessToken: String!
}

type MintItemDto {
  nftToken: Float!
  isMinted: Boolean!
  v: Float
  r: String
  s: String
}

type Mutation {
  createCampaign(stage: Float!, rewardId: String!, description: String!, type: String!): Campaign!
  createResource(name: String!, code: String!, element: String!, type: String!, description: String!, exp: Float, coinCost: Float): Resource!
  createReward(rewardResourceCreateDtos: [RewardResourceCreateDto!]!, type: String!, description: String!, isAutoClaim: Boolean!): Reward!
  createGoal(name: String!, type: String!, start: Float!, end: Float!, rewardId: String!): Goal!
  createQuest(name: String!, code: String, type: String!, description: String, status: String!, rewardId: String!, value: Float!): Quest!
  createUserQuest(userId: String!): UserQuest!
  createSchedule(eventId: String!, type: String!, duration: Float!, eventDuration: Float!): Schedule!
  createUserMeta(userId: String!, key: String, value: Float, hasLoginToday: Boolean, lastLoginAt: DateTime): UserMeta!
  createUserReward(userId: String!, questId: String, hasClaimed: String, rewardId: String!, expireAt: DateTime): UserReward!
  claimReward(userRewardId: String!): ClaimRewardDto!
  createSkill(name: String!, type: String!, element: String!, range: Float!, specialEffect: String!, animEffect: String!): Skill!
  upgradeSkill(upgradeResourceDtos: [UpgradeResourceDto!]!, totalCoin: Float!, userWarriorSkillId: String!): UserWarriorSkillReturnDto!
  createRandomWarrior(quantity: Float!, initRarity: String, initRole: String, initType: String): [Warrior!]!
  createUserWarrior(head: String!, shoulder: String!, leftHand: String!, rightHand: String!, body: String!, leg: String!, spineJson: String!, spineAtlas: String!, spineImage: String!): Warrior!
  createConfig(key: String!, value: String!, description: String!): GameConfig!
  createBundle(name: String!, priority: Float!): Bundle!
  generateWarriorForUser(userId: String!): [UserWarrior!]!
  generateWarriorForUserTest(quantity: Float!, userId: String!): [UserWarrior!]!
  generateWarrior(rarity: String!, quantity: Float!): [UserWarrior!]!
  upgradeWarrior(upgradeResourceDtos: [UpgradeResourceDto!]!, totalCoin: Float!, userWarriorId: String!): UserWarriorItemDto!
  sellAll: [MintItemDto!]!
  requestMintSignature(price: Float!, nftToken: Float!): MintItemDto!
  requestBuyAsset(nftToken: Float!): BuyItemDto!
  updateNftCreate(nftToken: Float!, mintTransactionHash: String = "", signature: String = "", sellOrder: String = "", totalQuantity: Float = 1, isMarketOption: Float = 0, expireBid: Float = 0, minBid: Float = 0, price: Float = 0, royalties: Float = 10, isPutOnMarket: Boolean, contract: String = "", startBid: DateTime = null): UserWarriorItemDto!
  updateNftOwner(walletAddress: String!, userId: String!, nftToken: Float!): UserWarriorItemDto!
  resetHealth: Boolean!
  createOrder(price: Float!, nftId: Float!): Order!
  updateOrderPrice(orderId: String!, price: Float!): Order!
  deleteOrders: Order!
  updateSlot(userWarriorId: String!, slotCode: String!): User!
  updateAchievement: User!
  updateUserName(name: String!): User!
  createAllMissingUserResources: Void!
  createAllMissingTeam: Void!
  sendReward(rewardId: String!, userId: String!): [RewardResourceItemDto!]!
  applyResourceByCode(code: String!, userId: String!): RewardResourceItemDto!
  addRole(role: String!, userId: String!): User!
  disabledRole(role: String!, userId: String!): User!
  getSendMonthlyReward: [UserReturnDto!]!
  destroyUser(userId: String!): Boolean!
  destroyUsers: Boolean!
  checkIncorrectBetaAccount: Boolean!
  sendRewardForLevel(rewardId: String!, stage: Float!): Boolean!
  addExpToUser(totalCoin: Float!, userId: String!): User!
  switchAvatar(avatarCode: String!): UserReturnDto!
  campaignEnergyUsage: Boolean!
  signup(walletAddress: WalletAddress!): AuthReturnDto!
  signEmail(walletAddress: WalletAddress!, email: String!, password: String!, isResend: Boolean!): AuthReturnDto!
  verifyEmail(token: String!): LoginReturnDto!
  forgotPassword(email: String!): AuthReturnDto!
  resetPassword(password: String!, token: String!): AuthReturnDto!
}

type Order {
  _id: String!
  sellerAddress: String!
  sellerUser: String
  price: Float!
  buyerAddress: String
  buyerUser: String
  nftId: Float!
  status: Float
}

type OrderDto {
  price: Float!
  nftId: Float!
  status: Float!
}

type Query {
  loginRecords: [LoginRecord!]!
  campaign(id: String!): Campaign!
  getCampaignInfo: CampaignInfoDto!
  getCampaigns(currentpage: Float!, perpage: Float!): [Campaign!]!
  countCapaign: Float!
  getResources(currentpage: Float!, perpage: Float!): [Resource!]!
  countResources: Float!
  rewardResource(id: String!): RewardResource!
  reward(id: String!): Reward!
  getRewards(currentpage: Float!, perpage: Float!): [Reward!]!
  countRewards: Float!
  getGoal(id: String!): Goal!
  getGoals(currentpage: Float!, perpage: Float!): [Goal!]!
  countGoals: Float!
  getQuest(id: String!): Quest!
  getBeginnerLoginRewardInfo: [BeginnerLoginRewardDto!]!
  getUserMeta(id: String!): UserMeta!
  getUserReward(id: String!): UserReward!
  getResourceDetail(userResourceId: String!): UserResourceReturnDto!
  getUserResourcesByType(type: String!): UserResourceListDto!
  getUserResourceHeader: [UserResourceReturnDto!]!
  getUserResourcesByTypeAndElement(element: String!, type: String!): UserResourceUpgradeDto!
  preUpgradeSkill(upgradeResourceDtos: [UpgradeResourceDto!]!, userWarriorSkillId: String!): UserWarriorSkillReturnDto!
  warrior(id: String!): Warrior!
  getWarriors(currentpage: Float!, perpage: Float!): [Warrior!]!
  countWarriors: Float!
  config(id: String!): GameConfig!
  getConfigByKey(key: String!): GameConfig!
  getAllGameConfig(currentpage: Float!, perpage: Float!): [GameConfig!]!
  countGameConfig: Float!
  getBundleVersion: BundleVersionDto!
  getListUserWarriors(sortBy: String!): UserListWarriorDto!
  preUpgradeWarrior(upgradeResourceDtos: [UpgradeResourceDto!]!, userWarriorId: String!): UserWarriorItemDto!
  listOrders: [Order!]!
  getAllUsers: [User!]!
  getAllUsersByAdmin(currentpage: Float!, perpage: Float!): [User!]!
  countUsers: Float!
  getBetaAccountByAdmin(currentpage: Float!, perpage: Float!): [BetaAccount!]!
  getBetaAccounts: [BetaAccount!]!
  countBetaAccounts: Float!
  getUser: User!
  getUserLobby: UserLobbyDto!
  getUserTeam: [SlotDto!]!
  getLeaderboard: [LeaderboardDto!]!
  getOwnLeaderboard: LeaderboardDto!
  getAvatars: [String!]!
  login(walletAddress: WalletAddress!): LoginReturnDto!
  loginWithEmail(email: String!, password: String!): LoginReturnDto!
  getWarriorsForWeb(sortBy: String!, orderBy: String!, page: Float!, limit: Float!, type: [String!] = [], element: [String!] = [], rarity: [String!] = [], role: [String!] = [], userId: String): UserWebListWarriorDto!
  getWarriorsOrderForWeb(sortBy: String!, orderBy: String!, page: Float!, limit: Float!, type: [String!] = [], element: [String!] = [], rarity: [String!] = [], role: [String!] = [], userId: String): UserWebListWarriorOrderDto!
  getWarriorDetail(userWarriorId: String!): UserWarriorItemDto!
  weeklyBodyPart: WeeklyBodyPartDto!
  weeklyWarriors: [Warrior!]!
}

type Quest {
  _id: String!
  eventId: String!
  name: String!
  code: String
  type: String!
  scheduleCode: String
  description: String
  status: String!
  rewardId: String!
  value: Float!
}

type Resource {
  _id: String!
  name: String!
  code: String!
  element: String!
  type: String!
  exp: Float!
  coinCost: Float!
  updatedAt: DateTime!
  createdAt: DateTime!
  description: String!
}

type Reward {
  _id: String!
  type: String!
  description: String!
  isAutoClaim: Boolean!
  rewardResources: [JSON!]!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type RewardResource {
  _id: String!
  resource: JSON!
  value: Float!
}

input RewardResourceCreateDto {
  resourceCode: String!
  value: Float!
}

type RewardResourceItemDto {
  name: String
  code: String
  type: String
  element: String
  exp: Float
  coinCost: Float
  value: Float
}

type Role {
  name: String!
  enabled: Boolean!
}

type Schedule {
  _id: String!
  eventId: String!
  type: String!
  status: String!
  lastExecutionAt: DateTime!
  nextExecutionAt: DateTime!
  duration: Float!
  eventDuration: Float!
}

type Skill {
  _id: String!
  code: String
  name: String!
  range: Float!
  type: String
  element: String
  Effect: String!
  animEffect: String!
}

type Slot {
  _id: String!
  name: String!
  code: String!
  index: Float!
  userWarrior: JSON
}

type SlotDto {
  userWarriorId: String
  name: String
  code: String
  level: Float
  damage: Float
  attackSpeed: Float
  status: String
  warriorName: String
  head: String
  sholder: String
  leftHand: String
  rightHand: String
  body: String
  leg: String
  leftWeapon: String
  rightWeapon: String
  type: String
  element: String
  rarity: String
  skill: UserWarriorSkillReturnDto
  health: Float
  mana: Float
}

input UpgradeResourceDto {
  resourceCode: String!
  value: Float!
}

type User {
  _id: String!
  email: String
  name: String
  avatarCode: String
  walletAddress: WalletAddress!
  walletSignature: String
  status: String
  team: [Slot!]
  roles: [Role!]
  verificationToken: String
  resetToken: String
  resetTokenExpires: DateTime
  passwordReset: DateTime
  campaignStage: Float!
  timeFinishStage: DateTime
  updatedAt: DateTime
  createdAt: DateTime
  level: Float!
  levelExp: Float!
  totalExp: Float!
  health: Float
  mana: Float
  test: Float
  dailyRewardStage: Float
  haveDailyReward: Boolean
  energy: Float!
}

type UserListWarriorDto {
  warriors: [UserWarriorItemDto!]
  firstPlayer: UserWarriorItemDto
}

type UserLobbyDto {
  _id: String!
  email: String
  name: String!
  avatarCode: String!
  campaignStage: Float
  timeFinishStage: Float!
  status: String!
  health: Float!
  mana: Float!
  energy: Float!
  team: [SlotDto!]!
}

type UserMeta {
  _id: String!
  userId: String!
  key: String!
  value: Float!
  hasLoginToday: Boolean!
  lastLoginAt: DateTime!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserQuest {
  _id: String!
  userId: String!
  questType: String!
  status: String!
  current: Float!
  requireTotal: Float!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserResource {
  _id: String!
  userId: String!
  resource: JSON!
  quantity: Float!
  increasePerMin: Float!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserResourceItemDto {
  _id: String
  name: String
  code: String
  type: String
  element: String
  exp: Float
  coinCost: Float
  quantity: Float
  totalCoin: Float
}

type UserResourceListDto {
  resources: [UserResourceItemDto!]
  firstResource: UserResourceReturnDto
}

type UserResourceReturnDto {
  _id: String
  name: String
  code: String
  type: String
  element: String
  quantity: Float
}

type UserResourceUpgradeDto {
  resources: [UserResourceItemDto!]
  totalCoin: Float
}

type UserReturnDto {
  _id: String!
  email: String
  name: String!
  avatarCode: String!
  campaignStage: Float
  timeFinishStage: Float!
  status: String!
  health: Float!
  mana: Float!
  energy: Float!
}

type UserReward {
  _id: String!
  userId: String!
  questId: String!
  hasClaimed: String!
  rewardId: String!
  expireAt: DateTime!
}

type UserWarrior {
  _id: String!
  userId: String
  walletAddress: String
  warrior: JSON!
  skill: JSON!
  level: Float!
  levelExp: Float!
  totalExp: Float!
  damage: Float!
  attackSpeed: Float!
  price: Float!
  isLocked: Boolean!
  status: String!
  creatationTime: DateTime!
  nftToken: Float!
  nftId: Float
  mintTransactionHash: String
  sellOrder: String
  signature: String
  isPutOnMarket: Boolean!
  royalties: Float
  totalQuantity: Float
  health: Float
  mana: Float
  receivedExp: Float
}

type UserWarriorItemDto {
  userWarriorId: String
  name: String
  head: String
  sholder: String
  leftHand: String
  rightHand: String
  body: String
  leg: String
  leftWeapon: String
  rightWeapon: String
  type: String
  element: String
  rarity: String
  rareOrder: Float
  role: String
  releaseDate: DateTime
  userId: String
  walletAddress: String
  level: Float
  levelExp: Float
  totalLevelExp: Float
  totalExp: Float
  damage: Float
  attackSpeed: Float
  price: Float
  status: String
  mintTransactionHash: String
  sellOrder: String
  signature: String
  nftToken: Float
  isPutOnMarket: Boolean
  royalties: Float
  totalQuantity: Float
  mana: Float
  health: Float
  receivedExp: Float
  skill: UserWarriorSkillReturnDto
  nftId: String
}

type UserWarriorOrderDto {
  userWarriorId: String
  name: String
  head: String
  sholder: String
  leftHand: String
  rightHand: String
  body: String
  leg: String
  leftWeapon: String
  rightWeapon: String
  type: String
  element: String
  rarity: String
  rareOrder: Float
  role: String
  releaseDate: DateTime
  userId: String
  walletAddress: String
  level: Float
  levelExp: Float
  totalLevelExp: Float
  totalExp: Float
  damage: Float
  attackSpeed: Float
  price: Float
  status: String
  mintTransactionHash: String
  sellOrder: String
  signature: String
  nftToken: Float
  nftId: Float
  isPutOnMarket: Boolean
  royalties: Float
  totalQuantity: Float
  mana: Float
  health: Float
  receivedExp: Float
  skill: UserWarriorSkillReturnDto
  order: OrderDto
}

type UserWarriorSkill {
  _id: String!
  userWarriorId: String!
  skill: JSON
  damage: Float!
  coolDown: Float!
  level: Float!
  mana: Float!
  timeEffect: Float!
  maxLevel: Float!
  levelExp: Float!
  totalExp: Float!
  receivedExp: Float!
}

type UserWarriorSkillReturnDto {
  _id: String
  damage: Float
  coolDown: Float
  userWarriorId: String
  mana: Float
  level: Float
  maxLevel: Float
  name: String
  code: String
  range: String
  type: String
  element: String
  animEffect: String
  Effect: String
  timeEffect: Float
  levelExp: Float
  totalExp: Float
}

type UserWebListWarriorDto {
  warriors: [UserWarriorItemDto!]
  page: Float
  limit: Float
  totalPage: Float
  total: Float
}

type UserWebListWarriorOrderDto {
  warriors: [UserWarriorOrderDto!]
  page: Float
  limit: Float
  totalPage: Float
  total: Float
}

"""Represents NULL values"""
scalar Void

scalar WalletAddress

type Warrior {
  _id: String!
  nftId: Float!
  name: String!
  head: String!
  sholder: String!
  leftHand: String!
  rightHand: String!
  body: String!
  leg: String!
  leftWeapon: String!
  rightWeapon: String!
  type: String!
  element: String!
  rarity: String!
  rareOrder: Float!
  role: String!
  status: String!
  skill: String
  releaseDate: DateTime!
  spineJson: String!
  spineAtlas: String!
  spineImage: String!
}

type WeeklyBodyPartDto {
  heads: [String!]!
  sholders: [String!]!
  leftHands: [String!]!
  rightHands: [String!]!
  rightWeapons: [String!]!
  leftWeapons: [String!]!
  bodys: [String!]!
  legs: [String!]!
  skills: [String!]!
}
